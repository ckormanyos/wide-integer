# ------------------------------------------------------------------------------
#  Copyright Christopher Kormanyos 2020 - 2022.
#  Distributed under the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt
#  or copy at http://www.boost.org/LICENSE_1_0.txt)
# ------------------------------------------------------------------------------

name: wide_integer
on:
  push:
    branches:
      - '**'
  pull_request:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
jobs:
  gcc-arm-none-eabi:
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        example: [ example001_mul_div, example003_sqrt ]
        standard: [ c++14, c++17, c++2a ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - id: upcase_my_example
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ matrix.example }}
      - name: update-tools
        run: |
          sudo apt install libncurses5 libpython2.7
          mkdir -p emu_env && cd emu_env
          wget --no-check-certificate https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
          tar -xvf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
          wget --no-check-certificate https://github.com/xpack-dev-tools/qemu-arm-xpack/releases/download/v2.8.0-13/xpack-qemu-arm-2.8.0-13-linux-x64.tar.gz
          tar -xvzf xpack-qemu-arm-2.8.0-13-linux-x64.tar.gz
        working-directory: ./
      - name: build-example-stm32f429
        run: |
          mkdir -p bin
          emu_env/gcc-arm-none-eabi-10.3-2021.10/bin/arm-none-eabi-g++ -std=${{ matrix.standard }} -Wall -Wextra -pedantic -O0 -g -gdwarf-2 -ffunction-sections -fdata-sections -x c++ -fno-rtti -fno-use-cxa-atexit -fno-exceptions -fno-nonansi-builtins -fno-threadsafe-statics -fno-enforce-eh-specs -ftemplate-depth=32 -mcpu=cortex-m4 -mtune=cortex-m4 -mthumb -mfloat-abi=soft -mno-unaligned-access -mno-long-calls -I. -DWIDE_INTEGER_DISABLE_IOSTREAM -DWIDE_INTEGER_DISABLE_TRIVIAL_COPY_AND_STD_LAYOUT_CHECKS -DWIDE_INTEGER_NAMESPACE=ckormanyos -DWIDE_INTEGER_STANDALONE_${{ steps.upcase_my_example.outputs.uppercase }} examples/${{ matrix.example }}.cpp ./target/micros/stm32f429/make/single/crt.cpp -nostartfiles -Wl,--gc-sections -Wl,-Map,./bin/${{ matrix.example }}.map -T ./target/micros/stm32f429/make/stm32f429.ld --specs=nano.specs --specs=nosys.specs -o ./bin/${{ matrix.example }}.elf
          emu_env/gcc-arm-none-eabi-10.3-2021.10/bin/arm-none-eabi-objcopy ./bin/${{ matrix.example }}.elf -O ihex ./bin/${{ matrix.example }}.hex
          ls -la ./bin/${{ matrix.example }}.elf ./bin/${{ matrix.example }}.hex ./bin/${{ matrix.example }}.map
        working-directory: ./
      - name: gcc-arm-none-eabi
      - name: emulate-target-stm32f429
        run: |
          ./emu_env/xpack-qemu-arm-2.8.0-13/bin/qemu-system-gnuarmeclipse --verbose --mcu STM32F429ZI --nographic --gdb tcp::9999 -d unimp,guest_errors &
        working-directory: ./
      - name: run-test-on-target
        run: |
          ./emu_env/gcc-arm-none-eabi-10.3-2021.10/bin/arm-none-eabi-gdb-py ./bin/${{ matrix.example }}.elf -x ./target/build/test_examples_emulator.py
          qemu_result=$?
          echo "qemu_result" "$qemu_result"
          echo "qemu_result" "$qemu_result" | grep 'qemu_result 0'
        working-directory: ./
  gcc-avr:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        example: [ example001_mul_div, example003_sqrt ]
        standard: [ c++14 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-avr avr-libc
      - name: clone-real-time-cpp
        run: |
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp.git ../real-time-cpp-root
        working-directory: ./
      - id: upcase_my_example
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ matrix.example }}
      - name: gcc-avr
        run: |
          mkdir bin
          echo ${{ steps.upcase_my_example.outputs.uppercase }}
          echo 'compile examples/${{ matrix.example }}.cpp with:'
          echo 'avr-g++ -x c++ -std=${{ matrix.standard }} -Os -Werror -Wall -Wextra -pedantic -Wmain -Wundef -Wconversion -Wsign-conversion -Wunused-parameter -Wuninitialized -Wmissing-declarations -Wshadow -Wunreachable-code -Wswitch-default -Wswitch-enum -Wcast-align -Wmissing-include-dirs -Winit-self -Wfloat-equal -Wdouble-promotion -mmcu=atmega328p -mrelax -finline-functions -finline-limit=32 -fsigned-char -g -gdwarf-2 -fno-exceptions -ffunction-sections -fdata-sections -fno-rtti -fno-use-cxa-atexit -fno-exceptions -fno-threadsafe-statics -fno-enforce-eh-specs -ftemplate-depth=32 -Wzero-as-null-pointer-constant -I. -I../real-time-cpp-root/ref_app/src -I../real-time-cpp-root/ref_app/src/util/STL -DWIDE_INTEGER_DISABLE_IOSTREAM -DWIDE_INTEGER_DISABLE_TRIVIAL_COPY_AND_STD_LAYOUT_CHECKS -DWIDE_INTEGER_DISABLE_IMPLEMENT_UTIL_DYNAMIC_ARRAY -DWIDE_INTEGER_NAMESPACE=ckormanyos -DWIDE_INTEGER_STANDALONE_${{ steps.upcase_my_example.outputs.uppercase }} examples/${{ matrix.example }}.cpp -Wl,--gc-sections -Wl,-Map,./bin/${{ matrix.example }}.map -o bin/${{ matrix.example }}.elf'
          avr-g++ -x c++ -std=${{ matrix.standard }} -Os -Werror -Wall -Wextra -pedantic -Wmain -Wundef -Wconversion -Wsign-conversion -Wunused-parameter -Wuninitialized -Wmissing-declarations -Wshadow -Wunreachable-code -Wswitch-default -Wswitch-enum -Wcast-align -Wmissing-include-dirs -Winit-self -Wfloat-equal -Wdouble-promotion -mmcu=atmega328p -mrelax -finline-functions -finline-limit=32 -fsigned-char -g -gdwarf-2 -fno-exceptions -ffunction-sections -fdata-sections -fno-rtti -fno-use-cxa-atexit -fno-exceptions -fno-threadsafe-statics -fno-enforce-eh-specs -ftemplate-depth=32 -Wzero-as-null-pointer-constant -I. -I../real-time-cpp-root/ref_app/src -I../real-time-cpp-root/ref_app/src/util/STL -DWIDE_INTEGER_DISABLE_IOSTREAM -DWIDE_INTEGER_DISABLE_TRIVIAL_COPY_AND_STD_LAYOUT_CHECKS -DWIDE_INTEGER_DISABLE_IMPLEMENT_UTIL_DYNAMIC_ARRAY -DWIDE_INTEGER_NAMESPACE=ckormanyos -DWIDE_INTEGER_STANDALONE_${{ steps.upcase_my_example.outputs.uppercase }} examples/${{ matrix.example }}.cpp -Wl,--gc-sections -Wl,-Map,./bin/${{ matrix.example }}.map -o bin/${{ matrix.example }}.elf
          echo
          echo 'run objcopy with:'
          echo 'avr-objcopy bin/${{ matrix.example }}.elf -O ihex bin/${{ matrix.example }}.hex'
          avr-objcopy bin/${{ matrix.example }}.elf -O ihex bin/${{ matrix.example }}.hex
          echo
          echo 'ls -la bin/${{ matrix.example }}.elf bin/${{ matrix.example }}.map bin/${{ matrix.example }}.hex'
          ls -la bin/${{ matrix.example }}.elf bin/${{ matrix.example }}.map bin/${{ matrix.example }}.hex
        working-directory: ./
  gcc-5_bionic:
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14 ]
        compiler: [ g++-5 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-5
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-5_bionic
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Wall -Wextra -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-clang-boost_backend:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ gnu++14, gnu++17, gnu++20 ]
        compiler: [ g++-11, clang++-12 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-11 g++-11 clang-12
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/assert
          git submodule update --init libs/config
          git submodule update --init libs/core
          git submodule update --init libs/math
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-boost_backend
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./test_uintwide_t_boost_backend_via_test_arithmetic.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Werror -Wall -Wextra -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root test/test_uintwide_t_boost_backend_via_test_arithmetic.cpp -o test_uintwide_t_boost_backend_via_test_arithmetic.exe
          echo "ls -la ./test_uintwide_t_boost_backend_via_test_arithmetic.exe"
          ls -la ./test_uintwide_t_boost_backend_via_test_arithmetic.exe
          ./test_uintwide_t_boost_backend_via_test_arithmetic.exe
